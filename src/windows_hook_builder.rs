use crate::*;

/// A builder for a [WindowsHook].
///
/// # Examples
///
/// ```rust
/// use windows_hook::{WindowsHookBuilder, WH};
/// # use windows_hook::{Handle, HHOOK};
/// # extern "system" fn your_hook_fn(code: i32, wparam: usize, lparam: isize) -> isize {
/// #   HHOOK::NULL.CallNextHookEx(unsafe { WH::from_raw(code) }, wparam, lparam)
/// # }
/// # fn main() -> Result<(), Box<dyn std::error::Error>> {
///
/// let hook = WindowsHookBuilder::new(WH::KEYBOARD_LL, your_hook_fn)
///     .with_module(winsafe::HINSTANCE::NULL)
///     .build_and_set()?;
///
/// assert!(hook.state().is_set());
/// # Ok(())
/// # }
/// ```
pub struct WindowsHookBuilder {
    /// The hook type id.
    pub id: WH,
    /// The callback proccess connected to the hook.
    pub proc: HOOKPROC,
    /// The optional dll module of the hook. If [None], null is passed.
    pub module: Module,
    /// The optional thread id of the hook. If [None], 0 is passed to the OS.
    pub thread_id: ThreadId,
}

impl WindowsHookBuilder {
    /// Creates a new [WindowsHookBuilder] with the mandatory properties.
    /// The optional paramaters are set to [None].
    ///
    /// # Parameters
    ///
    /// - `id`: The hook type id.
    /// - `proc`: The callback proccess connected to the hook.
    ///
    /// # Examples
    ///
    /// ```rust
    /// use windows_hook::{WindowsHookBuilder, WH};
    /// # use windows_hook::{Handle, HHOOK};
    /// # extern "system" fn your_hook_fn(code: i32, wparam: usize, lparam: isize) -> isize {
    /// #   HHOOK::NULL.CallNextHookEx(unsafe { WH::from_raw(code) }, wparam, lparam)
    /// # }
    ///
    /// let builder = WindowsHookBuilder::new(WH::KEYBOARD_LL, your_hook_fn);
    /// assert!(builder.id == WH::KEYBOARD_LL);
    /// assert!(builder.module.is_null());
    /// assert!(builder.thread_id.is_none());
    /// ```
    pub fn new(id: WH, proc: winsafe::HOOKPROC) -> Self {
        Self {
            id,
            proc,
            module: Module::NULL,
            thread_id: ThreadId::NONE,
        }
    }

    /// Sets the module of the hook.
    ///
    /// # Parameters
    ///
    /// - `module`: The module of the hook, or a type that can be converted to [Module].
    ///
    /// # Examples
    ///
    /// ```rust
    /// use windows_hook::{WindowsHookBuilder, WH, Module};
    /// # fn main() -> Result<(), Box<dyn std::error::Error>> {
    /// # use windows_hook::{Handle, HHOOK};
    /// # extern "system" fn your_hook_fn(code: i32, wparam: usize, lparam: isize) -> isize {
    /// #   HHOOK::NULL.CallNextHookEx(unsafe { WH::from_raw(code) }, wparam, lparam)
    /// # }
    ///
    /// let builder = WindowsHookBuilder::new(WH::KEYBOARD_LL, your_hook_fn)
    ///     .with_module(Module::current()?);
    /// assert!(builder.module.is_some());
    /// # Ok(())
    /// # }
    /// ```
    pub fn with_module<Mod: Into<Module>>(mut self, module: Mod) -> Self {
        self.module = module.into();
        self
    }

    /// Sets the thread id of the hook.
    ///
    /// # Parameters
    ///
    /// - `thread_id`: The thread id of the hook, or a type that can be converted to [ThreadId].
    ///
    /// # Examples
    ///
    /// ```rust
    /// use windows_hook::{WindowsHookBuilder, WH};
    /// # use windows_hook::{Handle, HHOOK};
    /// # extern "system" fn your_hook_fn(code: i32, wparam: usize, lparam: isize) -> isize {
    /// #   HHOOK::NULL.CallNextHookEx(unsafe { WH::from_raw(code) }, wparam, lparam)
    /// # }
    ///
    /// let builder = WindowsHookBuilder::new(WH::KEYBOARD_LL, your_hook_fn).with_thread_id(1);
    /// assert!(builder.thread_id.is_some());
    /// ```
    pub fn with_thread_id<Tid: Into<ThreadId>>(mut self, thread_id: Tid) -> Self {
        self.thread_id = thread_id.into();
        self
    }

    /// Builds a [WindowsHook] and sets it.
    ///
    /// # Errors
    ///
    /// Returns any error generated by the os during `SetWindowsHookEx`.
    ///
    /// # Examples
    ///
    /// ```rust
    /// use windows_hook::{WindowsHookBuilder, WH};
    /// # use windows_hook::{Handle, HHOOK};
    /// # extern "system" fn your_hook_fn(code: i32, wparam: usize, lparam: isize) -> isize {
    /// #   HHOOK::NULL.CallNextHookEx(unsafe { WH::from_raw(code) }, wparam, lparam)
    /// # }
    /// # fn main() -> Result<(), Box<dyn std::error::Error>> {
    ///
    /// let hook = WindowsHookBuilder::new(WH::KEYBOARD_LL, your_hook_fn).build_and_set()?;
    /// assert!(hook.state().is_set());
    /// # Ok(())
    /// # }
    /// ```
    pub fn build_and_set(self) -> Result<WindowsHook, SysError> {
        WindowsHook::set_new(self.id, self.proc, self.module, self.thread_id)
    }
}
